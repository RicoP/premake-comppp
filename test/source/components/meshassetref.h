///////////////////////////////////////////////////////////////////
// AUTOGENERATED do not edit by hand                             //
///////////////////////////////////////////////////////////////////
#pragma once
#include <serializer/serializer.h>

struct MeshAssetRef {
  int id;

  void setDefaultValues() {
    std::memset(this, 0, sizeof(MeshAssetRef));
  }

  bool equals(const MeshAssetRef & rhs) const {
    return
      id == rhs.id;
  }
};

inline bool operator==(const MeshAssetRef &lhs, const MeshAssetRef &rhs) {
  return lhs.equals(rhs);
}

inline bool operator!=(const MeshAssetRef &lhs, const MeshAssetRef &rhs) {
  return !lhs.equals(rhs);
}

///////////////////////////////////////////////////////////////////
// serializer                                                    //
///////////////////////////////////////////////////////////////////
inline void serialize(MeshAssetRef &o, ISerializer &s) {
  if(s.node_begin("MeshAssetRef", ros::hash("MeshAssetRef"), &o)) {
    s.key("id");
    serialize(o.id, s);
    s.node_end();
  }
  s.end();
}

///////////////////////////////////////////////////////////////////
// deserializer                                                  //
///////////////////////////////////////////////////////////////////
inline void deserialize(MeshAssetRef &o, IDeserializer &s) {
  o.setDefaultValues();
  while (s.next_key()) {
    switch (s.hash_key()) {
      case ros::hash("id"):
        deserialize(o.id, s);
        break;
      default: s.skip_key(); break;
    }
  }
}

///////////////////////////////////////////////////////////////////
// hashing                                                       //
///////////////////////////////////////////////////////////////////
namespace ros {
  inline ros::hash_value hash(MeshAssetRef &o) {
    ros::hash_value h = ros::hash(o.id);
    return h;
  }
}

///////////////////////////////////////////////////////////////////
// randomize                                                     //
///////////////////////////////////////////////////////////////////
inline void randomize(MeshAssetRef &o, ros::hash_value & h) {
  randomize(o.id, h);
}
