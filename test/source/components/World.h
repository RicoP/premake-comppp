///////////////////////////////////////////////////////////////////
// AUTOGENERATED do not edit by hand                             //
///////////////////////////////////////////////////////////////////
#pragma once
#include "serializer.h"

#include "components/player.h"
struct World {
  ros::array<4, Player> player;
  ros::array<4, float> scores;
  ros::string<64> title;

  void setDefaultValues() {
    std::memset(this, 0, sizeof(World));
    player.size = 0;
    scores.size = 0;
  }

  bool equals(const World & rhs) const {
    return
      player == rhs.player &&
      scores == rhs.scores &&
      title == rhs.title;
  }
};

inline bool operator==(const World &lhs, const World &rhs) {
  return lhs.equals(rhs);
}

inline bool operator!=(const World &lhs, const World &rhs) {
  return !lhs.equals(rhs);
}

///////////////////////////////////////////////////////////////////
// serializer                                                    //
///////////////////////////////////////////////////////////////////
inline void serialize(World &o, ISerializer &s) {
  if(s.node_begin("World", ros::hash("World"), &o)) {
    s.key("player");
    serialize(o.player, s);
    s.key("scores");
    serialize(o.scores, s);
    s.key("title");
    serialize(o.title, s);
    s.node_end();
  }
  s.end();
}

///////////////////////////////////////////////////////////////////
// deserializer                                                  //
///////////////////////////////////////////////////////////////////
inline void deserialize(World &o, IDeserializer &s) {
  o.setDefaultValues();
  while (s.next_key()) {
    switch (s.hash_key()) {
      case ros::hash("player"):
        deserialize(o.player, s);
        break;
      case ros::hash("scores"):
        deserialize(o.scores, s);
        break;
      case ros::hash("title"):
        deserialize(o.title, s);
        break;
      default: s.skip_key(); break;
    }
  }
}

///////////////////////////////////////////////////////////////////
// hashing                                                       //
///////////////////////////////////////////////////////////////////
namespace ros {
  inline ros::hash_value hash(World &o) {
    ros::hash_value h = ros::hash(o.player);
    h = ros::xor64(h);
    h ^= ros::hash(o.scores);
    h = ros::xor64(h);
    h ^= ros::hash(o.title);
    return h;
  }
}

///////////////////////////////////////////////////////////////////
// randomize                                                     //
///////////////////////////////////////////////////////////////////
inline void randomize(World &o, ros::hash_value & h) {
  randomize(o.player, h);
  randomize(o.scores, h);
  randomize(o.title, h);
}
