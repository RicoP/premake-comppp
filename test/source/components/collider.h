///////////////////////////////////////////////////////////////////
// AUTOGENERATED do not edit by hand                             //
///////////////////////////////////////////////////////////////////
#pragma once
#include "serializer.h"

#include "components/objectid.h"
#include "components/vector3.h"
#include "components/vector3.h"
struct Collider {
  bool active;
  ros::array<16, ObjectID> intersections;
  vector3 pivot;
  vector3 scale;

  void setDefaultValues() {
    std::memset(this, 0, sizeof(Collider));
    intersections.size = 0;
    pivot = vector(0,0,0);
    scale = vector(1,1,1);
  }

  bool equals(const Collider & rhs) const {
    return
      active == rhs.active &&
      intersections == rhs.intersections &&
      pivot == rhs.pivot &&
      scale == rhs.scale;
  }
};

inline bool operator==(const Collider &lhs, const Collider &rhs) {
  return lhs.equals(rhs);
}

inline bool operator!=(const Collider &lhs, const Collider &rhs) {
  return !lhs.equals(rhs);
}

///////////////////////////////////////////////////////////////////
// serializer                                                    //
///////////////////////////////////////////////////////////////////
inline void serialize(Collider &o, ISerializer &s) {
  if(s.node_begin("Collider", ros::hash("Collider"), &o)) {
    s.key("active");
    serialize(o.active, s);
    s.key("intersections");
    serialize(o.intersections, s);
    s.key("pivot");
    serialize(o.pivot, s);
    s.key("scale");
    serialize(o.scale, s);
    s.node_end();
  }
  s.end();
}

///////////////////////////////////////////////////////////////////
// deserializer                                                  //
///////////////////////////////////////////////////////////////////
inline void deserialize(Collider &o, IDeserializer &s) {
  o.setDefaultValues();
  while (s.next_key()) {
    switch (s.hash_key()) {
      case ros::hash("active"):
        deserialize(o.active, s);
        break;
      case ros::hash("intersections"):
        deserialize(o.intersections, s);
        break;
      case ros::hash("pivot"):
        deserialize(o.pivot, s);
        break;
      case ros::hash("scale"):
        deserialize(o.scale, s);
        break;
      default: s.skip_key(); break;
    }
  }
}

///////////////////////////////////////////////////////////////////
// hashing                                                       //
///////////////////////////////////////////////////////////////////
namespace ros {
  inline ros::hash_value hash(Collider &o) {
    ros::hash_value h = ros::hash(o.active);
    h = ros::xor64(h);
    h ^= ros::hash(o.intersections);
    h = ros::xor64(h);
    h ^= ros::hash(o.pivot);
    h = ros::xor64(h);
    h ^= ros::hash(o.scale);
    return h;
  }
}

///////////////////////////////////////////////////////////////////
// randomize                                                     //
///////////////////////////////////////////////////////////////////
inline void randomize(Collider &o, ros::hash_value & h) {
  randomize(o.active, h);
  randomize(o.intersections, h);
  randomize(o.pivot, h);
  randomize(o.scale, h);
}
